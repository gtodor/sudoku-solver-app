{"version":3,"sources":["Cell.js","Alert.js","Sudoku.js","Header.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Cell","handleKeyPress","event","charCode","props","isSolved","number","onChange","rowIndex","columnIndex","value","this","tabIndex","onKeyPress","className","isHint","React","Component","Alert","incrementMinutes","setState","elapsedTime","state","closeHandler","onClose","id","console","log","intervalId","setInterval","clearInterval","animation","delay","autohide","Header","Body","message","Sudoku","changeValue","index","cells","slice","solved","handleErrors","response","ok","json","solveSudoku","sudoku","map","cell","join","loading","fetch","method","then","solution","catch","err","errJson","key","require","uuid","alertMessages","error","Array","fill","clearSudoku","alertClosed","filter","am","rowIndexes","from","keys","columnIndexes","alertMessage","variant","size","onClick","disabled","as","role","aria-hidden","href","width","height","src","alt","data-recalc-dims","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9d4a51e3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Cell extends React.Component {\r\n  handleKeyPress = event => {\r\n    if (event.charCode >= 48 && event.charCode <= 57 && !this.props.isSolved) {\r\n      const number = event.charCode - 48;\r\n      this.props.onChange(number, this.props.rowIndex, this.props.columnIndex);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const value = this.props.value;\r\n    return (\r\n      <div\r\n        tabIndex={this.props.rowIndex * 9 + this.props.columnIndex + 1}\r\n        onKeyPress={this.handleKeyPress}\r\n        className={this.props.isHint ? \"SudokuCell isHint\" : \"SudokuCell\"}\r\n      >\r\n        {value !== 0 ? value : \"\"}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cell;\r\n","import React from \"react\";\r\nimport Toast from \"react-bootstrap/Toast\";\r\n\r\nclass Alert extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    console.log(\"creating alert\");\r\n    this.state = {\r\n      elapsedTime: 0\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const intervalId = setInterval(this.incrementMinutes, 60000);\r\n    this.setState({ intervalId });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.state.intervalId);\r\n  }\r\n\r\n  incrementMinutes = () => {\r\n    this.setState({ elapsedTime: this.state.elapsedTime + 1 });\r\n  };\r\n\r\n  closeHandler = () => {\r\n    this.props.onClose(this.props.id);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Toast onClose={this.closeHandler} animation={true} delay={15000} autohide>\r\n        <Toast.Header>\r\n          <strong className=\"mr-auto\">Sudoku solver</strong>\r\n          <small>{this.state.elapsedTime === 0 ? \"just now\" : `${this.state.elapsedTime} minutes`}</small>\r\n        </Toast.Header>\r\n        <Toast.Body className=\"whiteBody\">{this.props.message}</Toast.Body>\r\n      </Toast>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Alert;\r\n","import React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport Cell from \"./Cell\";\r\nimport Alert from \"./Alert\";\r\n\r\nclass Sudoku extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cells: new Array(81).fill({ value: 0, isHint: false }),\r\n      rowIndexes: Array.from(Array(9).keys()),\r\n      columnIndexes: Array.from(Array(9).keys()),\r\n      solved: false,\r\n      alertMessages: [],\r\n      loading: false\r\n    };\r\n  }\r\n\r\n  changeValue = (value, rowIndex, columnIndex) => {\r\n    let index = rowIndex * 9 + columnIndex;\r\n    this.setState({\r\n      cells: [\r\n        ...this.state.cells.slice(0, index),\r\n        { value, isHint: value !== 0 },\r\n        ...this.state.cells.slice(index + 1)\r\n      ],\r\n      solved: false,\r\n    });\r\n  };\r\n\r\n  handleErrors = response => {\r\n    if (!response.ok) {\r\n      throw response;\r\n    }\r\n    return response.json();\r\n  };\r\n\r\n  solveSudoku = () => {\r\n    const sudoku = this.state.cells.map(cell => cell.value).join(\"\");\r\n    this.setState({\r\n      loading: true\r\n    });\r\n\r\n    fetch(\r\n      `https://sudoku-solver-api.herokuapp.com/sudoku_solver/api/solve?sudoku=${sudoku}`,\r\n      {\r\n        method: \"get\"\r\n      }\r\n    )\r\n      .then(this.handleErrors)\r\n      .then(response => {\r\n        const cells = response.solution.map((value, index) => ({\r\n          value,\r\n          isHint: this.state.cells[index].isHint\r\n        }));\r\n        this.setState({\r\n          cells,\r\n          solved: true,\r\n          loading: false\r\n        });\r\n      })\r\n      .catch(err => {\r\n        err.json().then(errJson => {\r\n          const uuid = require(\"uuid/v1\");\r\n          const key = uuid();\r\n          this.setState({\r\n            alertMessages: [\r\n              ...this.state.alertMessages,\r\n              { message: errJson.error, key }\r\n            ],\r\n            cells: new Array(81).fill({ value: 0, isHint: false }),\r\n            solved: false,\r\n            loading: false\r\n          });\r\n        });\r\n      });\r\n  };\r\n\r\n  clearSudoku = () => {\r\n    this.setState({\r\n      cells: new Array(81).fill({ value: 0, isHint: false }),\r\n      solved: false,\r\n    });\r\n  };\r\n\r\n  alertClosed = key => {\r\n    this.setState({\r\n      alertMessages: this.state.alertMessages.filter(am => am.key !== key)\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Sudoku\">\r\n        <div className=\"toastRegion\">\r\n          {this.state.alertMessages.map(alertMessage => (\r\n            <Alert\r\n              key={alertMessage.key}\r\n              id={alertMessage.key}\r\n              message={alertMessage.message}\r\n              onClose={this.alertClosed}\r\n            />\r\n          ))}\r\n        </div>\r\n        <table>\r\n          <tbody>\r\n            {this.state.rowIndexes.map(rowIndex => (\r\n              <tr key={\"row_\" + rowIndex}>\r\n                {this.state.columnIndexes.map(columnIndex => (\r\n                  <td key={\"cell_\" + rowIndex + \"_\" + columnIndex}>\r\n                    <Cell\r\n                      value={this.state.cells[rowIndex * 9 + columnIndex].value}\r\n                      isHint={this.state.cells[rowIndex * 9 + columnIndex].isHint}\r\n                      isSolved={this.state.solved}\r\n                      rowIndex={rowIndex}\r\n                      columnIndex={columnIndex}\r\n                      onChange={this.changeValue}\r\n                    />\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <div className=\"buttonsPanel\">\r\n          <Button\r\n            tabIndex={-1}\r\n            variant=\"outline-primary\"\r\n            size=\"lg\"\r\n            className=\"button\"\r\n            onClick={this.solveSudoku}\r\n            disabled={this.state.loading}\r\n          >\r\n            {this.state.loading ? (\r\n              <div>\r\n                <Spinner\r\n                  as=\"span\"\r\n                  animation=\"grow\"\r\n                  size=\"sm\"\r\n                  role=\"status\"\r\n                  aria-hidden=\"true\"\r\n                />\r\n                Loading...\r\n              </div>\r\n            ) : (\r\n              \"Solve\"\r\n            )}\r\n          </Button>\r\n          <Button\r\n            tabIndex={-1}\r\n            variant=\"outline-primary\"\r\n            size=\"lg\"\r\n            className=\"button\"\r\n            onClick={this.clearSudoku}\r\n            disabled={this.state.loading}\r\n          >\r\n            Clear\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sudoku;\r\n","import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"titleBar\">\r\n        <h1> Sudoku Solver </h1>\r\n        <h3> Fill in the Sudoku and hit Solve </h3>\r\n      </div>\r\n      <div className=\"githubBanner\">\r\n        <a href=\"https://github.com/gtodor/sudoku-solver-app\">\r\n          <img width=\"149\" height=\"149\" src=\"https://github.blog/wp-content/uploads/2008/12/forkme_right_orange_ff7600.png?resize=149%2C149\" className=\"attachment-full size-full\" alt=\"Fork me on GitHub\" data-recalc-dims=\"1\"/>\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div></div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Sudoku from \"./Sudoku\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Sudoku />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}